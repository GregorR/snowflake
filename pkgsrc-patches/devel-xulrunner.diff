# HG changeset patch
# Parent 4f20750cd4fe6f2026e740c9380b4ace949a9681

diff --git a/devel/xulrunner/Makefile b/devel/xulrunner/Makefile
--- a/devel/xulrunner/Makefile
+++ b/devel/xulrunner/Makefile
@@ -34,6 +34,9 @@
 .include "mozilla-common.mk"
 .include "options.mk"
 
+# [Gregor] To make some patches work
+CFLAGS+=		-D__musl__
+
 pre-configure:
 	cd ${WRKSRC} && autoconf
 	cd ${WRKSRC}/js/src && autoconf
diff --git a/devel/xulrunner/distinfo b/devel/xulrunner/distinfo
--- a/devel/xulrunner/distinfo
+++ b/devel/xulrunner/distinfo
@@ -112,3 +112,4 @@
 SHA1 (patch-xpcom_idl-parser_Makefile.in) = 4b141b5f4b7715b187aaedf4810b3998776768e2
 SHA1 (patch-xpcom_idl-parser_header.py) = 66104636742fea4391a54f88d7927ebf81b2a74c
 SHA1 (patch-xpcom_typelib_xpidl_Makefile.in) = 1f10216e2b46e5bfa4e24de4a42f8b13af3f2dca
+SHA1 (patch-zq) = b5705937db9663ec56962e25e1f007182174edb8
diff --git a/devel/xulrunner/patches/patch-zq b/devel/xulrunner/patches/patch-zq
new file mode 100644
--- /dev/null
+++ b/devel/xulrunner/patches/patch-zq
@@ -0,0 +1,450 @@
+diff -r 39c8c27f8b14 build/unix/elfhack/elfhack.cpp
+--- build/unix/elfhack/elfhack.cpp	Tue May 08 18:47:38 2012 +0000
++++ build/unix/elfhack/elfhack.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -38,6 +38,7 @@
+ #undef NDEBUG
+ #include <assert.h>
+ #include <cstring>
++#include <strings.h>
+ #include <cstdlib>
+ #include <cstdio>
+ #include "elfxx.h"
+diff -r 39c8c27f8b14 ipc/chromium/src/base/debug_util_posix.cc
+--- ipc/chromium/src/base/debug_util_posix.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/debug_util_posix.cc	Thu May 10 14:14:21 2012 +0000
+@@ -5,7 +5,7 @@
+ #include "build/build_config.h"
+ #include "base/debug_util.h"
+ 
+-#define MOZ_HAVE_EXECINFO_H (defined(__linux__) && !defined(ANDROID))
++#define MOZ_HAVE_EXECINFO_H (defined(__linux__) && !defined(ANDROID) && !defined(__musl__))
+ 
+ #include <errno.h>
+ #include <fcntl.h>
+diff -r 39c8c27f8b14 ipc/chromium/src/base/file_util.cc
+--- ipc/chromium/src/base/file_util.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/file_util.cc	Thu May 10 14:14:21 2012 +0000
+@@ -8,7 +8,7 @@
+ #include <io.h>
+ #endif
+ #include <stdio.h>
+-#if defined(ANDROID)
++#if defined(ANDROID) || defined(__musl__)
+ #include <unistd.h>
+ #endif
+ 
+diff -r 39c8c27f8b14 ipc/chromium/src/base/file_util.h
+--- ipc/chromium/src/base/file_util.h	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/file_util.h	Thu May 10 14:14:21 2012 +0000
+@@ -12,7 +12,7 @@
+ 
+ #if defined(OS_WIN)
+ #include <windows.h>
+-#elif defined(ANDROID)
++#elif defined(ANDROID) || defined(__musl__)
+ #include <sys/stat.h>
+ #elif defined(OS_POSIX) 
+ #include <sys/types.h>
+@@ -466,7 +466,7 @@
+ #if defined(OS_WIN)
+   WIN32_FIND_DATA find_data_;
+   HANDLE find_handle_;
+-#elif defined(ANDROID)
++#elif defined(ANDROID) || defined(__musl__)
+   void *fts_;
+ #elif defined(OS_POSIX)
+   FTS* fts_;
+diff -r 39c8c27f8b14 ipc/chromium/src/base/file_util_linux.cc
+--- ipc/chromium/src/base/file_util_linux.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/file_util_linux.cc	Thu May 10 14:14:21 2012 +0000
+@@ -5,6 +5,7 @@
+ #include "base/file_util.h"
+ 
+ #include <fcntl.h>
++#include <unistd.h>
+ 
+ #include <string>
+ #include <vector>
+diff -r 39c8c27f8b14 ipc/chromium/src/base/file_util_posix.cc
+--- ipc/chromium/src/base/file_util_posix.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/file_util_posix.cc	Thu May 10 14:14:21 2012 +0000
+@@ -8,13 +8,15 @@
+ #include <errno.h>
+ #include <fcntl.h>
+ #include <fnmatch.h>
+-#ifndef ANDROID
++#if !defined(ANDROID) && !defined(__musl__)
+ #include <fts.h>
+ #endif
+ #include <libgen.h>
+ #include <stdio.h>
+ #include <string.h>
++#ifndef __musl__
+ #include <sys/errno.h>
++#endif
+ #include <sys/mman.h>
+ #include <sys/stat.h>
+ #include <sys/types.h>
+@@ -31,7 +33,7 @@
+ #include "base/time.h"
+ 
+ // FreeBSD/OpenBSD lacks stat64, but its stat handles files >2GB just fine
+-#ifndef __linux__
++#if !defined(__linux__) || defined(__musl__)
+ #define stat64 stat
+ #endif
+ 
+@@ -123,7 +125,7 @@
+   if (!recursive)
+     return (rmdir(path_str) == 0);
+ 
+-#ifdef ANDROID
++#if defined(ANDROID) || defined(__musl__)
+   // XXX Need ftsless impl for bionic
+   return false;
+ #else
+@@ -196,7 +198,7 @@
+     return false;
+   }
+ 
+-#ifdef ANDROID
++#if defined(ANDROID) || defined(__musl__)
+   // XXX Need ftsless impl for bionic
+   return false;
+ #else
+@@ -419,7 +421,7 @@
+   std::string tmpdir_string = tmpdir.value();
+   // this should be OK since mkdtemp just replaces characters in place
+   char* buffer = const_cast<char*>(tmpdir_string.c_str());
+-#ifdef ANDROID
++#if defined(ANDROID) || defined(__musl__)
+   char* dtemp = NULL;
+ #else
+   char* dtemp = mkdtemp(buffer);
+@@ -549,7 +551,7 @@
+ }
+ 
+ FileEnumerator::~FileEnumerator() {
+-#ifndef ANDROID
++#if !defined(ANDROID) && !defined(__musl__)
+   if (fts_)
+     fts_close(fts_);
+ #endif
+@@ -561,7 +563,7 @@
+   if (!is_in_find_op_)
+     return;
+ 
+-#ifndef ANDROID
++#if !defined(ANDROID) && !defined(__musl__)
+   memcpy(&(info->stat), fts_ent_->fts_statp, sizeof(info->stat));
+   info->filename.assign(fts_ent_->fts_name);
+ #endif
+@@ -572,7 +574,7 @@
+ // large directories with many files this can be quite deep.
+ // TODO(erikkay) - get rid of this recursive pattern
+ FilePath FileEnumerator::Next() {
+-#ifdef ANDROID
++#if defined(ANDROID) || defined(__musl__)
+   return FilePath();
+ #else
+   if (!is_in_find_op_) {
+diff -r 39c8c27f8b14 ipc/chromium/src/base/message_pump_libevent.cc
+--- ipc/chromium/src/base/message_pump_libevent.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/message_pump_libevent.cc	Thu May 10 14:14:21 2012 +0000
+@@ -6,6 +6,7 @@
+ 
+ #include <errno.h>
+ #include <fcntl.h>
++#include <unistd.h>
+ 
+ #include "eintr_wrapper.h"
+ #include "base/logging.h"
+diff -r 39c8c27f8b14 ipc/chromium/src/base/process_util.h
+--- ipc/chromium/src/base/process_util.h	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/process_util.h	Thu May 10 14:14:21 2012 +0000
+@@ -16,6 +16,7 @@
+ #elif defined(OS_LINUX)
+ #include <limits.h>
+ #include <sys/types.h>
++#include <dirent.h>
+ #elif defined(OS_MACOSX)
+ #include <mach/mach.h>
+ #endif
+diff -r 39c8c27f8b14 ipc/chromium/src/base/third_party/nspr/prtime.cc
+--- ipc/chromium/src/base/third_party/nspr/prtime.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/third_party/nspr/prtime.cc	Thu May 10 14:14:21 2012 +0000
+@@ -173,7 +173,7 @@
+     result *= kSecondsToMicroseconds;
+     result += exploded->tm_usec;
+     return result;
+-#elif defined(ANDROID)
++#elif defined(ANDROID) || defined(__musl__)
+ #define LL_ADD(r, a, b)     ((r) = (a) + (b))
+ #define LL_SUB(r, a, b)     ((r) = (a) - (b))
+ 
+diff -r 39c8c27f8b14 ipc/chromium/src/base/time_posix.cc
+--- ipc/chromium/src/base/time_posix.cc	Tue May 08 18:47:38 2012 +0000
++++ ipc/chromium/src/base/time_posix.cc	Thu May 10 14:14:21 2012 +0000
+@@ -13,6 +13,9 @@
+ #else
+ #include <time.h>
+ #endif
++#if defined(__musl__)
++#include <unistd.h>
++#endif
+ 
+ #include <limits>
+ 
+@@ -62,11 +65,13 @@
+   timestruct.tm_wday   = exploded.day_of_week;  // mktime/timegm ignore this
+   timestruct.tm_yday   = 0;     // mktime/timegm ignore this
+   timestruct.tm_isdst  = -1;    // attempt to figure it out
++#ifndef __musl__
+   timestruct.tm_gmtoff = 0;     // not a POSIX field, so mktime/timegm ignore
+   timestruct.tm_zone   = NULL;  // not a POSIX field, so mktime/timegm ignore
++#endif  
+ 
+   time_t seconds;
+-#ifdef ANDROID
++#if defined(ANDROID) || defined(__musl__)
+     seconds = mktime(&timestruct);
+ #else
+   if (is_local)
+diff -r 39c8c27f8b14 js/src/ctypes/CTypes.cpp
+--- js/src/ctypes/CTypes.cpp	Tue May 08 18:47:38 2012 +0000
++++ js/src/ctypes/CTypes.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -490,7 +490,7 @@
+ #ifdef WIN32
+   return _finite(f) != 0;
+ #else
+-  return finite(f);
++  return isfinite(f);
+ #endif
+ }
+ 
+diff -r 39c8c27f8b14 js/src/jsnativestack.cpp
+--- js/src/jsnativestack.cpp	Tue May 08 18:47:38 2012 +0000
++++ js/src/jsnativestack.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -37,6 +37,9 @@
+  * ***** END LICENSE BLOCK ***** */
+ 
+ #include <stdlib.h>
++#ifdef __musl__
++#include <stdio.h>
++#endif
+ #include "jstypes.h"
+ #include "jsnativestack.h"
+ 
+@@ -137,6 +140,42 @@
+     return ptib->tib_pstacklimit;
+ }
+ 
++#elif defined(__musl__)
++
++void *
++GetNativeStackBaseImpl()
++{
++    long onstack;
++    FILE *procselfmaps;
++    char *line = NULL;
++    size_t lineSz = 0;
++    
++    onstack = (long) (void *) &onstack;
++    
++    procselfmaps = fopen("/proc/self/maps", "r");
++    if (procselfmaps == NULL) abort();
++    
++    while (getdelim(&line, &lineSz, '\n', procselfmaps) > 0) {
++        long from, to;
++        if (sscanf(line, "%lx-%lx", &from, &to) != 2) continue;
++        if (from <= onstack && onstack < to) {
++            /* found our stack */
++            free(line);
++            fclose(procselfmaps);
++#if JS_STACK_GROWTH_DIRECTION > 0
++            return (void *) from;
++#else
++            return (void *) to;
++#endif
++        }
++    }
++    free(line);
++    fclose(procselfmaps);
++    
++    /* didn't find it! */
++    abort();
++}
++
+ #else /* XP_UNIX */
+ 
+ void *
+diff -r 39c8c27f8b14 memory/mozalloc/mozalloc.cpp
+--- memory/mozalloc/mozalloc.cpp	Tue May 08 18:47:38 2012 +0000
++++ memory/mozalloc/mozalloc.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -259,7 +259,7 @@
+ 
+ #if defined(XP_MACOSX)
+     return malloc_size(ptr);
+-#elif defined(MOZ_MEMORY) || defined(XP_LINUX)
++#elif (defined(MOZ_MEMORY) || defined(XP_LINUX)) && !defined(__musl__)
+     // XXX: the |defined(XP_LINUX)| may be too lax;  some Linux installations
+     // might use a libc that doesn't have malloc_usable_size.  Let's fix this
+     // if/when it happens.
+diff -r 39c8c27f8b14 toolkit/library/Makefile.in
+--- toolkit/library/Makefile.in	Tue May 08 18:47:38 2012 +0000
++++ toolkit/library/Makefile.in	Thu May 10 14:14:21 2012 +0000
+@@ -561,8 +561,8 @@
+ 
+ ifeq ($(OS_ARCH),FreeBSD)
+ OS_LIBS += $(call EXPAND_LIBNAME,kvm)
++endif
+ EXTRA_DSO_LDOPTS += -lplc4 -lplds4 -lnspr4 -lnssutil3
+-endif
+ 
+ ifeq ($(OS_ARCH),NetBSD)
+ OS_LIBS += $(call EXPAND_LIBNAME,kvm)
+diff -r 39c8c27f8b14 toolkit/mozapps/update/updater/updater.cpp
+--- toolkit/mozapps/update/updater/updater.cpp	Tue May 08 18:47:38 2012 +0000
++++ toolkit/mozapps/update/updater/updater.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -127,7 +127,9 @@
+ #else
+ # include <sys/wait.h>
+ # include <unistd.h>
++#ifndef __musl__
+ # include <fts.h>
++#endif
+ 
+ #ifdef XP_MACOSX
+ # include <sys/time.h>
+@@ -2238,6 +2240,7 @@
+ 
+ int add_dir_entries(const NS_tchar *dirpath, ActionList *list)
+ {
++#ifndef __musl__
+   int rv = OK;
+   FTS *ftsdir;
+   FTSENT *ftsdirEntry;
+@@ -2343,6 +2346,9 @@
+   fts_close(ftsdir);
+ 
+   return rv;
++#else
++  return -1;
++#endif
+ }
+ #endif
+ 
+diff -r 39c8c27f8b14 toolkit/xre/nsSigHandlers.cpp
+--- toolkit/xre/nsSigHandlers.cpp	Tue May 08 18:47:38 2012 +0000
++++ toolkit/xre/nsSigHandlers.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -60,7 +60,7 @@
+ #include <sys/resource.h>
+ #include <unistd.h>
+ #include <stdlib.h> // atoi
+-#ifndef ANDROID // no Android impl
++#if !defined(ANDROID) && !defined(__musl__) // no Android impl
+ #  include <ucontext.h>
+ #endif
+ #endif
+@@ -190,7 +190,7 @@
+   *mxcsr &= ~SSE_STATUS_FLAGS; /* clear all pending SSE exceptions */
+ #endif
+ #endif
+-#if defined(LINUX) && !defined(ANDROID)
++#if defined(LINUX) && !defined(ANDROID) && !defined(__musl__)
+   ucontext_t *uc = (ucontext_t *)context;
+ 
+ #if defined(__i386__)
+diff -r 39c8c27f8b14 tools/profiler/sps/platform-linux.cc
+--- tools/profiler/sps/platform-linux.cc	Tue May 08 18:47:38 2012 +0000
++++ tools/profiler/sps/platform-linux.cc	Thu May 10 14:14:21 2012 +0000
+@@ -47,7 +47,7 @@
+ #define PATH_MAX_TOSTRING(x) #x
+ #define PATH_MAX_STRING(x) PATH_MAX_TOSTRING(x)
+ 
+-#if defined(__GLIBC__)
++#if defined(__GLIBC__) || defined(__musl__)
+ // glibc doesn't implement gettid(2).
+ #include <sys/syscall.h>
+ pid_t gettid()
+@@ -56,6 +56,10 @@
+ }
+ #endif
+ 
++#if defined(__musl__)
++typedef long useconds_t;
++#endif
++
+ #ifdef ENABLE_SPS_LEAF_DATA
+ /* a crapy version of getline, because it's not included in bionic */
+ static ssize_t getline(char **lineptr, size_t *n, FILE *stream)
+diff -r 39c8c27f8b14 xpcom/ds/nsMathUtils.h
+--- xpcom/ds/nsMathUtils.h	Tue May 08 18:47:38 2012 +0000
++++ xpcom/ds/nsMathUtils.h	Thu May 10 14:14:21 2012 +0000
+@@ -134,6 +134,12 @@
+     // Darwin has deprecated |finite| and recommends |isfinite|. The former is
+     // not present in the iOS SDK.
+     return isfinite(d);
++#elif defined(__musl__)
++#if defined(__cplusplus) && !defined(isfinite)
++    return std::isfinite(d);
++#else
++    return isfinite(d);
++#endif
+ #else
+     return finite(d);
+ #endif
+diff -r 39c8c27f8b14 xpcom/glue/standalone/nsGlueLinkingDlopen.cpp
+--- xpcom/glue/standalone/nsGlueLinkingDlopen.cpp	Tue May 08 18:47:38 2012 +0000
++++ xpcom/glue/standalone/nsGlueLinkingDlopen.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -41,7 +41,7 @@
+ #include "nsXPCOMGlue.h"
+ #include "nscore.h"
+ 
+-#if defined(LINUX) && !defined(ANDROID)
++#if defined(LINUX) && !defined(ANDROID) && !defined(__musl__)
+ #define _GNU_SOURCE 
+ #include <fcntl.h>
+ #include <unistd.h>
+@@ -159,7 +159,7 @@
+     sTop = d;
+ }
+ 
+-#if defined(LINUX) && !defined(ANDROID)
++#if defined(LINUX) && !defined(ANDROID) && !defined(__musl__)
+ static const unsigned int bufsize = 4096;
+ 
+ #ifdef HAVE_64BIT_OS
+@@ -218,7 +218,7 @@
+ static void
+ ReadDependentCB(const char *aDependentLib, bool do_preload)
+ {
+-#if defined(LINUX) && !defined(ANDROID)
++#if defined(LINUX) && !defined(ANDROID) && !defined(__musl__)
+     if (do_preload)
+         preload(aDependentLib);
+ #endif
+diff -r 39c8c27f8b14 xpcom/io/nsLocalFileUnix.cpp
+--- xpcom/io/nsLocalFileUnix.cpp	Tue May 08 18:47:38 2012 +0000
++++ xpcom/io/nsLocalFileUnix.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -436,7 +436,7 @@
+         PR_Delete(mPath.get());
+     }
+ 
+-#if defined(LINUX) && !defined(ANDROID)
++#if defined(LINUX) && !defined(ANDROID) && !defined(__musl__)
+     if (flags & OS_READAHEAD) {
+         readahead(PR_FileDesc2NativeHandle(*_retval), 0, 0);
+     }
+diff -r 39c8c27f8b14 xpcom/threads/nsThread.cpp
+--- xpcom/threads/nsThread.cpp	Tue May 08 18:47:38 2012 +0000
++++ xpcom/threads/nsThread.cpp	Thu May 10 14:14:21 2012 +0000
+@@ -53,7 +53,7 @@
+                       _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED) &&           \
+                       !(_POSIX_C_SOURCE >= 200809L || _XOPEN_SOURCE >= 700)
+ 
+-#if defined(XP_UNIX) && !defined(ANDROID) && !defined(DEBUG) && HAVE_UALARM \
++#if defined(XP_UNIX) && !defined(ANDROID) && !defined(__musl__) && !defined(DEBUG) && HAVE_UALARM \
+   && defined(_GNU_SOURCE)
+ # define MOZ_CANARY
+ # include <unistd.h>
